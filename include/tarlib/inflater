#ifndef _TARLIB_INFLATER_
#define _TARLIB_INFLATER_

#include <functional>
#include <cassert>
#include <tarlib/tarlib.h>

namespace std {
	class invoker {
	public:
		virtual void operator( ARGS... args ) {
			std::bind( args... )();
		}
	};
#if 0
	class queue_invoker() : public invoker{
	public:
		typedef std::function<void()> void_functor;
		
		template <typename... ARGS>
		void operator()( ARGS... args) override {
			
		}
	private:
		std::queue<void_functor> _queue;
	};
#endif
}

namespace tarlib {

	template <typename Invoker = std::invoker>
	class inflater {
	public:
		typedef std::function<bool(const tar_header& header)> header_callback_type;
		typedef std::function<void(const std::uint8_t* begin, const std::uint8_t* end)> progress_callback_type;
		inflater( header_callback_type header, progress_callback_type progress, Invoker& invoker = Invoker() );
		~inflater() noexcept;
		void operator()( const char* begin, const char* end );
	private:
		void put()( const char* begin, const char* end );
		tar_stream _tarstream;
		header_callback_type   _header_callback;
		progress_callback_type _progress_callback;
		bool _headerInvoked;
		Invoker _invoker;
	};
}

template <typename Invoker>
tarlib::inflater<Invoker>::inflater( header_callback_type header_callback, progress_callback_type progress, Invoker& invoker = Invoker() ) :
	_tarstream(), _header_callback( header_callback ), _progress_callback( progress ), _headerInvoked( false ), _invoker( invoker )
{
	auto result = tar_inflateInit( &_tarstream );
}

template <typename Invoker>
tarlib::inflater<Invoker>::~inflater() noexcept {
	auto result = tar_inflateEnd( &_tarstream );
}

template <typename Invoker>
void
tarlib::inflater<Invoker>::operator()( const char* begin, const char* end ) {
	if( begin == end )
		return;

	if( begin > end )
		std::swap( begin, end );

	_tarstream.next_in = begin;

	const auto distance = std::distance( begin, end );
	// Since we swapped before, this should NEVER happen
	assert( distance >= 0 );
	
	
	_invoker( put, this, begin, end );
}

template <typename Invoker>
void
tarlib::inflater<Invoker>::put( const char* begin, const char* end ) {
	const auto distance = std::distance( begin, end );
	
	// We made sure distance is positive
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
	_tarstream.avail_in = distance;
#pragma GCC diagnostic pop
	
	while( _tarstream.avail_in ) {
		auto result = tar_inflate( &_tarstream );
	
		if( !_headerInvoked && _tarstream.header ) {
			_headerInvoked = true;
			_header_callback( *_tarstream.header );
		}
	
		if( _tarstream.avail_out ) {
			_progress_callback( _tarstream.next_out, _tarstream.next_out + _tarstream.avail_out );
		}
	}
	
	// All data was processed
}

#endif //_TARLIB_INFLATER_
